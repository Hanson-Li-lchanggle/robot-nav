# @package _global_

defaults:
  - /habitat: habitat_config_base
  - /habitat/task: pointnav
  - /habitat/dataset/pointnav: hm3d
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat/simulator/sim_sensors@habitat.simulator.agents.main_agent.sim_sensors.spot_left_depth_sensor: spot_left_depth_sensor
  - /habitat/simulator/sim_sensors@habitat.simulator.agents.main_agent.sim_sensors.spot_right_depth_sensor: spot_right_depth_sensor
  - /habitat_baselines/rl/policy/obs_transforms:
      - stitch_spot_front_vision
  - override /habitat/task/actions:
    - kinematic_velocity_control
  - override /habitat/task/measurements:
    - distance_to_goal
    - collision_count
    - backwards_motion_count
    - success
    - spl
    - distance_to_goal_reward
    - kinematic_nav_reward
  - _self_

habitat:
  task:
    actions:
      kinematic_velocity_control:
        lin_vel_range: [ -0.5, 0.5 ]
        ang_vel_range: [ -30.0, 30.0 ]
        min_abs_lin_speed: 0.05  # meters/sec
        min_abs_ang_speed: 3.0  # deg/sec
        time_step: 0.5  # seconds
        robot_urdf: "data/robots/hab_spot_arm/urdf/hab_spot_arm.urdf"
        nominal_joints: [ 0, -180, 0, 135, 90, 0, -90, 0, 0, 60, -120, 0, 60, -120, 0, 60, -120, 0, 60, -120 ]
        nominal_position: [ 0.0, 0.5, 0.0 ]  # horizontal, vertical, and forward axes
        nominal_rotation: [ 0.0, 0.0, 180.0 ]  # roll, pitch, yaw in degrees
    reward_measure: "kinematic_nav_reward"

  simulator:
    habitat_sim_v0:
      # Physics must be enabled for EmbodimentCollisionChecker to work (sim.contact_test)
      enable_physics: True
    agents:
      main_agent:
        sim_sensors:
          spot_left_depth_sensor:
            height: 212
            width: 120
            hfov: 58.286
            min_depth: 0.0
            max_depth: 3.5
            position: [ -0.03740343144695029, 0.5, -0.4164822634134684 ]
            orientation: [ -0.4415683, -0.57648225, 0.270526 ]
          spot_right_depth_sensor:
            height: 212
            width: 120
            hfov: 58.286
            min_depth: 0.0
            max_depth: 3.5
            position: [ 0.03614789234067159, 0.5, -0.4164822634134684 ]
            orientation: [ -0.4415683, 0.57648225, -0.270526 ]

habitat_baselines:
  verbose: False
  trainer_name: "ver"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  num_environments: 64
  checkpoint_folder: "data/new_checkpoints"
  num_updates: -1
  total_num_steps: 2.5e9
  log_interval: 10
  num_checkpoints: 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True

  rl:
    policy:
      action_distribution_type: "gaussian"
      name: "PointNavResNetPolicy"

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet18
      rnn_type: LSTM
      num_recurrent_layers: 2
